/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Perform a health check on the API */
    get: operations["healthcheck"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/assets": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve a list of assets */
    get: operations["getAssets"];
    put?: never;
    /** Create a new asset */
    post: operations["createAsset"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/assets/{assetId}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        assetId: components["parameters"]["assetIdPathParam"];
      };
      cookie?: never;
    };
    /** Retrieve an asset by its ID */
    get: operations["getAssetById"];
    put?: never;
    post?: never;
    /** Delete an asset by its ID */
    delete: operations["deleteAssetById"];
    options?: never;
    head?: never;
    /** Update an asset by its ID */
    patch: operations["patchAssetById"];
    trace?: never;
  };
  "/assets/{assetId}/like": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        assetId: components["parameters"]["assetIdPathParam"];
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Toggle like status for an asset */
    post: operations["likeAssetById"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/assets/{assetId}/comments": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        assetId: components["parameters"]["assetIdPathParam"];
      };
      cookie?: never;
    };
    /** Retrieve all comments for a specific asset */
    get: operations["getCommentsByAssetId"];
    put?: never;
    /** Create a new comment on a specific asset */
    post: operations["createCommentByAssetId"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/comments/{commentId}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        commentId: components["parameters"]["commentIdPathParam"];
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Delete a specific comment by its ID */
    delete: operations["deleteCommentById"];
    options?: never;
    head?: never;
    /** Update a specific comment by its ID */
    patch: operations["patchCommentById"];
    trace?: never;
  };
  "/collections": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve a list of collections */
    get: operations["getCollections"];
    put?: never;
    /** Create a new collection */
    post: operations["createCollection"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/collections/{collectionId}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        collectionId: components["parameters"]["collectionIdPathParam"];
      };
      cookie?: never;
    };
    /** Retrieve a collection by its ID */
    get: operations["getCollectionById"];
    put?: never;
    post?: never;
    /** Delete a collection by its ID */
    delete: operations["deleteCollectionById"];
    options?: never;
    head?: never;
    /** Update a collection by its ID */
    patch: operations["patchCollectionById"];
    trace?: never;
  };
  "/collections/{collectionId}/assets": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        collectionId: components["parameters"]["collectionIdPathParam"];
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Add a list of assets to a collection */
    post: operations["addAssetsToCollection"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/collections/{collectionId}/assets/remove": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        collectionId: components["parameters"]["collectionIdPathParam"];
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Remove a list of assets from a collection */
    post: operations["removeAssetsFromCollection"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Find or create a record for the current user */
    post: operations["initializeUser"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/{userId}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        userId: components["parameters"]["userIdPathParam"];
      };
      cookie?: never;
    };
    /** Retrieve a user by their ID */
    get: operations["getUserById"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve the current user */
    get: operations["getCurrentUser"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Update the current user */
    patch: operations["patchCurrentUser"];
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** @enum {string} */
    visibility: "public" | "private" | "unlisted";
    /** @enum {string} */
    assetType: "character" | "location" | "quest" | "map";
    comment: components["schemas"]["userSummary"] & {
      /** Format: uuid */
      commentId: string;
      body: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    collection: components["schemas"]["userSummary"] & {
      /** Format: uuid */
      collectionId: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      visibility: components["schemas"]["visibility"];
      name: string;
      description: string;
      assetCount: number;
    };
    userSummary: {
      /** Format: uuid */
      userId: string;
      displayName: string;
    };
    asset: components["schemas"]["userSummary"] & {
      /** Format: uuid */
      assetId: string;
      assetType: components["schemas"]["assetType"];
      name: string;
      visibility: components["schemas"]["visibility"];
      /** Format: uri */
      imageUrl: string;
      likeCount: number;
      isLikedByCurrentUser: boolean;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      description: string;
      commentCount: number;
    };
    assetData:
      | components["schemas"]["character"]
      | components["schemas"]["location"]
      | components["schemas"]["quest"]
      | components["schemas"]["map"];
    character: {
      /** @enum {string} */
      race:
        | "human"
        | "elf"
        | "drow"
        | "half_elf"
        | "half_orc"
        | "halfling"
        | "dwarf"
        | "gnome"
        | "tiefling"
        | "githyanki"
        | "dragonborn";
      /** @enum {string} */
      class:
        | "barbarian"
        | "bard"
        | "cleric"
        | "druid"
        | "fighter"
        | "monk"
        | "paladin"
        | "ranger"
        | "rogue"
        | "sorcerer"
        | "warlock"
        | "wizard";
      /** @enum {string} */
      gender: "male" | "female" | "non_binary" | "genderfluid" | "agender";
      /** @enum {string} */
      alignment:
        | "lawful_good"
        | "neutral_good"
        | "chaotic_good"
        | "lawful_neutral"
        | "true_neutral"
        | "chaotic_neutral"
        | "lawful_evil"
        | "neutral_evil"
        | "chaotic_evil";
      appearance: string;
      personality: string;
      background: string;
      abilities: string;
      equipment: string;
      motivation: string;
      notes: string;
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      assetType: "character";
    };
    location: {
      locationType: string;
      terrain: string;
      climate: string;
      atmosphere: string;
      inhabitants: string;
      dangerLevel: string;
      pointsOfInterest: string;
      narrativeRole: string;
      notes: string;
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      assetType: "location";
    };
    quest: {
      questType: string;
      tone: string;
      location: string;
      complexity: string;
      objective: string;
      antagonist: string;
      notableNPCs: string;
      hasCombat: boolean;
      hasPuzzles: boolean;
      hasSkillChallenges: boolean;
      hasDilemmas: boolean;
      notes: string;
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      assetType: "quest";
    };
    map: {
      mapType: string;
      terrain: string;
      scale: string;
      pointsOfInterest: string;
      notes: string;
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      assetType: "map";
    };
    assetDataCreate:
      | components["schemas"]["characterCreate"]
      | components["schemas"]["locationCreate"]
      | components["schemas"]["questCreate"]
      | components["schemas"]["mapCreate"];
    characterCreate: {
      /** @enum {string} */
      race:
        | "human"
        | "elf"
        | "drow"
        | "half_elf"
        | "half_orc"
        | "halfling"
        | "dwarf"
        | "gnome"
        | "tiefling"
        | "githyanki"
        | "dragonborn";
      /** @enum {string} */
      class:
        | "barbarian"
        | "bard"
        | "cleric"
        | "druid"
        | "fighter"
        | "monk"
        | "paladin"
        | "ranger"
        | "rogue"
        | "sorcerer"
        | "warlock"
        | "wizard";
      /** @enum {string} */
      gender: "male" | "female" | "non_binary" | "genderfluid" | "agender";
      /** @enum {string} */
      alignment:
        | "lawful_good"
        | "neutral_good"
        | "chaotic_good"
        | "lawful_neutral"
        | "true_neutral"
        | "chaotic_neutral"
        | "lawful_evil"
        | "neutral_evil"
        | "chaotic_evil";
      appearance?: string;
      personality?: string;
      background?: string;
      abilities?: string;
      equipment?: string;
      motivation?: string;
      notes?: string;
    };
    locationCreate: {
      locationType: string;
      terrain?: string;
      climate?: string;
      atmosphere?: string;
      inhabitants?: string;
      dangerLevel?: string;
      pointsOfInterest?: string;
      narrativeRole?: string;
      notes?: string;
    };
    questCreate: {
      questType: string;
      tone?: string;
      location?: string;
      complexity?: string;
      objective?: string;
      antagonist?: string;
      notableNPCs?: string;
      hasCombat: boolean;
      hasPuzzles: boolean;
      hasSkillChallenges: boolean;
      hasDilemmas: boolean;
      notes?: string;
    };
    mapCreate: {
      mapType: string;
      terrain?: string;
      scale?: string;
      pointsOfInterest?: string;
      notes?: string;
    };
  };
  responses: {
    /** @description Health check response */
    HealthCheck: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          /** @enum {string} */
          status: "ok";
          /** Format: uri */
          githubUrl: string;
          version: string;
          hostname: string;
          /** Format: date-time */
          timestamp: string;
        };
      };
    };
    /** @description Standard error response */
    ErrorResponse: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          /** @enum {string} */
          status: "error";
          error: {
            message: string;
            code: number;
          };
        };
      };
    };
    /** @description OK */
    AssetDetails: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["asset"] & {
          data: components["schemas"]["assetData"];
        };
      };
    };
    /** @description OK */
    AssetLike: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          /** Format: uuid */
          assetId: string;
          likeCount: number;
          isLikedByCurrentUser: boolean;
        };
      };
    };
    /** @description OK */
    AssetList: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          assets: components["schemas"]["asset"][];
        };
      };
    };
    /** @description OK */
    CommentDetails: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["comment"];
      };
    };
    /** @description OK */
    CommentList: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          comments: components["schemas"]["comment"][];
        };
      };
    };
    /** @description OK */
    CollectionDetails: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["collection"] & {
          assets: components["schemas"]["asset"][];
        };
      };
    };
    /** @description OK */
    CollectionList: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          collections: components["schemas"]["collection"][];
        };
      };
    };
    /** @description OK */
    UserDetails: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          /** Format: uuid */
          userId: string;
          /** Format: date-time */
          createdAt: string;
          /** Format: date-time */
          updatedAt: string;
          displayName: string;
          bio: string;
        };
      };
    };
  };
  parameters: {
    limitQueryParam: number;
    offsetQueryParam: number;
    nameQueryParam: string;
    descriptionQueryParam: string;
    assetTypeQueryParam: components["schemas"]["assetType"];
    userIdQueryParam: string;
    collectionIdQueryParam: string;
    userIdPathParam: string;
    collectionIdPathParam: string;
    assetIdPathParam: string;
    commentIdPathParam: string;
  };
  requestBodies: {
    assetCreate: {
      content: {
        "application/json": {
          name: string;
          assetType: components["schemas"]["assetType"];
          visibility: components["schemas"]["visibility"];
          data: components["schemas"]["assetDataCreate"];
        };
      };
    };
    commentCreateAndUpdate: {
      content: {
        "application/json": {
          body: string;
        };
      };
    };
    collectionCreateAndUpdate: {
      content: {
        "application/json": {
          name: string;
          description?: string;
          visibility?: components["schemas"]["visibility"];
        };
      };
    };
    userUpdate: {
      content: {
        "application/json": {
          displayName?: string;
          bio?: string;
        };
      };
    };
    assetUpdate: {
      content: {
        "application/json": {
          name?: string;
          description?: string;
          visibility?: components["schemas"]["visibility"];
        };
      };
    };
    assetIds: {
      content: {
        "application/json": {
          assetIds: string[];
        };
      };
    };
  };
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  healthcheck: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["HealthCheck"];
      400: components["responses"]["ErrorResponse"];
      500: components["responses"]["ErrorResponse"];
    };
  };
  getAssets: {
    parameters: {
      query?: {
        limit?: components["parameters"]["limitQueryParam"];
        offset?: components["parameters"]["offsetQueryParam"];
        assetType?: components["parameters"]["assetTypeQueryParam"];
        collectionId?: components["parameters"]["collectionIdQueryParam"];
        userId?: components["parameters"]["userIdQueryParam"];
        name?: components["parameters"]["nameQueryParam"];
        description?: components["parameters"]["descriptionQueryParam"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["AssetList"];
      400: components["responses"]["ErrorResponse"];
      500: components["responses"]["ErrorResponse"];
    };
  };
  createAsset: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: components["requestBodies"]["assetCreate"];
    responses: {
      201: components["responses"]["AssetDetails"];
      400: components["responses"]["ErrorResponse"];
      401: components["responses"]["ErrorResponse"];
      415: components["responses"]["ErrorResponse"];
      500: components["responses"]["ErrorResponse"];
    };
  };
  getAssetById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        assetId: components["parameters"]["assetIdPathParam"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["AssetDetails"];
      403: components["responses"]["ErrorResponse"];
      404: components["responses"]["ErrorResponse"];
      500: components["responses"]["ErrorResponse"];
    };
  };
  deleteAssetById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        assetId: components["parameters"]["assetIdPathParam"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      401: components["responses"]["ErrorResponse"];
      403: components["responses"]["ErrorResponse"];
      404: components["responses"]["ErrorResponse"];
      500: components["responses"]["ErrorResponse"];
    };
  };
  patchAssetById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        assetId: components["parameters"]["assetIdPathParam"];
      };
      cookie?: never;
    };
    requestBody?: components["requestBodies"]["assetUpdate"];
    responses: {
      200: components["responses"]["AssetDetails"];
      400: components["responses"]["ErrorResponse"];
      401: components["responses"]["ErrorResponse"];
      403: components["responses"]["ErrorResponse"];
      404: components["responses"]["ErrorResponse"];
      415: components["responses"]["ErrorResponse"];
      500: components["responses"]["ErrorResponse"];
    };
  };
  likeAssetById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        assetId: components["parameters"]["assetIdPathParam"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["AssetLike"];
      401: components["responses"]["ErrorResponse"];
      403: components["responses"]["ErrorResponse"];
      404: components["responses"]["ErrorResponse"];
      500: components["responses"]["ErrorResponse"];
    };
  };
  getCommentsByAssetId: {
    parameters: {
      query?: {
        limit?: components["parameters"]["limitQueryParam"];
        offset?: components["parameters"]["offsetQueryParam"];
      };
      header?: never;
      path: {
        assetId: components["parameters"]["assetIdPathParam"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["CommentList"];
      403: components["responses"]["ErrorResponse"];
      404: components["responses"]["ErrorResponse"];
      500: components["responses"]["ErrorResponse"];
    };
  };
  createCommentByAssetId: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        assetId: components["parameters"]["assetIdPathParam"];
      };
      cookie?: never;
    };
    requestBody?: components["requestBodies"]["commentCreateAndUpdate"];
    responses: {
      201: components["responses"]["CommentDetails"];
      400: components["responses"]["ErrorResponse"];
      401: components["responses"]["ErrorResponse"];
      403: components["responses"]["ErrorResponse"];
      404: components["responses"]["ErrorResponse"];
      415: components["responses"]["ErrorResponse"];
      500: components["responses"]["ErrorResponse"];
    };
  };
  deleteCommentById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        commentId: components["parameters"]["commentIdPathParam"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      401: components["responses"]["ErrorResponse"];
      403: components["responses"]["ErrorResponse"];
      404: components["responses"]["ErrorResponse"];
      500: components["responses"]["ErrorResponse"];
    };
  };
  patchCommentById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        commentId: components["parameters"]["commentIdPathParam"];
      };
      cookie?: never;
    };
    requestBody?: components["requestBodies"]["commentCreateAndUpdate"];
    responses: {
      200: components["responses"]["CommentDetails"];
      400: components["responses"]["ErrorResponse"];
      401: components["responses"]["ErrorResponse"];
      403: components["responses"]["ErrorResponse"];
      404: components["responses"]["ErrorResponse"];
      415: components["responses"]["ErrorResponse"];
      500: components["responses"]["ErrorResponse"];
    };
  };
  getCollections: {
    parameters: {
      query?: {
        limit?: components["parameters"]["limitQueryParam"];
        offset?: components["parameters"]["offsetQueryParam"];
        userId?: components["parameters"]["userIdQueryParam"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["CollectionList"];
      400: components["responses"]["ErrorResponse"];
      500: components["responses"]["ErrorResponse"];
    };
  };
  createCollection: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: components["requestBodies"]["collectionCreateAndUpdate"];
    responses: {
      201: components["responses"]["CollectionDetails"];
      400: components["responses"]["ErrorResponse"];
      401: components["responses"]["ErrorResponse"];
      415: components["responses"]["ErrorResponse"];
      500: components["responses"]["ErrorResponse"];
    };
  };
  getCollectionById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        collectionId: components["parameters"]["collectionIdPathParam"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["CollectionDetails"];
      401: components["responses"]["ErrorResponse"];
      403: components["responses"]["ErrorResponse"];
      404: components["responses"]["ErrorResponse"];
      500: components["responses"]["ErrorResponse"];
    };
  };
  deleteCollectionById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        collectionId: components["parameters"]["collectionIdPathParam"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      401: components["responses"]["ErrorResponse"];
      403: components["responses"]["ErrorResponse"];
      404: components["responses"]["ErrorResponse"];
      500: components["responses"]["ErrorResponse"];
    };
  };
  patchCollectionById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        collectionId: components["parameters"]["collectionIdPathParam"];
      };
      cookie?: never;
    };
    requestBody?: components["requestBodies"]["collectionCreateAndUpdate"];
    responses: {
      200: components["responses"]["CollectionDetails"];
      400: components["responses"]["ErrorResponse"];
      401: components["responses"]["ErrorResponse"];
      403: components["responses"]["ErrorResponse"];
      404: components["responses"]["ErrorResponse"];
      415: components["responses"]["ErrorResponse"];
      500: components["responses"]["ErrorResponse"];
    };
  };
  addAssetsToCollection: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        collectionId: components["parameters"]["collectionIdPathParam"];
      };
      cookie?: never;
    };
    requestBody?: components["requestBodies"]["assetIds"];
    responses: {
      200: components["responses"]["CollectionDetails"];
      400: components["responses"]["ErrorResponse"];
      401: components["responses"]["ErrorResponse"];
      403: components["responses"]["ErrorResponse"];
      404: components["responses"]["ErrorResponse"];
      415: components["responses"]["ErrorResponse"];
      500: components["responses"]["ErrorResponse"];
    };
  };
  removeAssetsFromCollection: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        collectionId: components["parameters"]["collectionIdPathParam"];
      };
      cookie?: never;
    };
    requestBody?: components["requestBodies"]["assetIds"];
    responses: {
      200: components["responses"]["CollectionDetails"];
      400: components["responses"]["ErrorResponse"];
      401: components["responses"]["ErrorResponse"];
      403: components["responses"]["ErrorResponse"];
      404: components["responses"]["ErrorResponse"];
      415: components["responses"]["ErrorResponse"];
      500: components["responses"]["ErrorResponse"];
    };
  };
  initializeUser: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["UserDetails"];
      201: components["responses"]["UserDetails"];
      401: components["responses"]["ErrorResponse"];
      500: components["responses"]["ErrorResponse"];
    };
  };
  getUserById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        userId: components["parameters"]["userIdPathParam"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["UserDetails"];
      404: components["responses"]["ErrorResponse"];
      500: components["responses"]["ErrorResponse"];
    };
  };
  getCurrentUser: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: components["responses"]["UserDetails"];
      401: components["responses"]["ErrorResponse"];
      500: components["responses"]["ErrorResponse"];
    };
  };
  patchCurrentUser: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: components["requestBodies"]["userUpdate"];
    responses: {
      200: components["responses"]["UserDetails"];
      400: components["responses"]["ErrorResponse"];
      401: components["responses"]["ErrorResponse"];
      415: components["responses"]["ErrorResponse"];
      500: components["responses"]["ErrorResponse"];
    };
  };
}
